<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Chris Parnin</title>
    <link>http://chrisparnin.github.io</link>
    <pubDate>2013-09-17 13:58:35 -0400</pubDate>
    <item>
      <title>Deploying native binaries with Visual Studio extensions</title>
      <link>http://chrisparnin.github.io/articles/2013/09/deploying-native-binaries-with-visual-studio-extensions</link>
      <pubDate>2013-09-17</pubDate>
      <description>&lt;h3 id="toc_0"&gt;Deploying Native Binaries&lt;/h3&gt;

&lt;p&gt;If your extension depends on a native binary, you have to do some tricks to get the binary to be copied into the experimental hive directory for testing and including in your VSIX for deployment.&lt;/p&gt;

&lt;p&gt;I was doing some manual copies in my post build event that was brittle, and had to explicitly include the native binaries as &lt;code&gt;content&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="toc_1"&gt;Another way&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/nulltoken"&gt;nulltoken&lt;/a&gt; had given out a helpful hint on using msbuild directives to stream-line this process:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You might be willing to glance at
&lt;a href="https://github.com/libgit2/libgit2sharp/blob/vNext/LibGit2Sharp/CopyNativeDependencies.targets"&gt;https://github.com/libgit2/libgit2sharp/blob/vNext/LibGit2Sharp/CopyNativeDependencies.targets&lt;/a&gt; and the way it&amp;#39;s being used in &lt;code&gt;LibGit2Sharp.Tests.csproj&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="toc_2"&gt;How to do it&lt;/h3&gt;

&lt;p&gt;I adapted this approach for my project. First, I define a reference to native binaries that live in the nuget directory.  &lt;code&gt;$(MSBuildProjectDirectory)&lt;/code&gt; refers to directory containing the .csproj file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;NativeBinariesDirectory&amp;gt;$(MSBuildProjectDirectory)\..\packages\LibGit2Sharp.0.13.0.0\NativeBinaries&amp;lt;/NativeBinariesDirectory&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nice thing about using MSBuild directives is that you can use pattern matching to include files.
&lt;code&gt;$(NativeBinariesDirectory)\**\*.*&amp;quot;&lt;/code&gt; specifies all the native files I want to include in the project.
The &lt;code&gt;Link&lt;/code&gt; directive describes how the file is displayed in the solution explorer.  &lt;code&gt;CopyToOutputDirectory&lt;/code&gt; is used to copy the binaries in the output bin directory (but not vsix).  &lt;code&gt;IncludeInVSIX&lt;/code&gt; is what makes sure these files will be included in the experimental hive extension folder as well as the packaged .VSIX file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;Content Include=&amp;quot;$(NativeBinariesDirectory)\**\*.*&amp;quot;&amp;gt;
        &amp;lt;Link&amp;gt;NativeBinaries\%(RecursiveDir)%(Filename)%(Extension)&amp;lt;/Link&amp;gt;
        &amp;lt;CopyToOutputDirectory&amp;gt;PreserveNewest&amp;lt;/CopyToOutputDirectory&amp;gt;
        &amp;lt;IncludeInVSIX&amp;gt;true&amp;lt;/IncludeInVSIX&amp;gt;
    &amp;lt;/Content&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_3"&gt;In conclusion&lt;/h3&gt;

&lt;p&gt;Finally, I initially tried nulltoken&amp;#39;s solution directly, but couldn&amp;#39;t find out how to get it to work in the context of a visual studio extension.&lt;/p&gt;

&lt;p&gt;This was useful for helping me understand some of the concepts: &lt;a href="http://stackoverflow.com/questions/1292351/including-content-files-in-csproj-that-are-outside-the-project-cone"&gt;Relevant Stack Overflow quesition&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Parse git log output in C#</title>
      <link>http://chrisparnin.github.io/articles/2013/09/parse-git-log-output-in-c</link>
      <pubDate>2013-09-05</pubDate>
      <description>&lt;p&gt;A simple example for parsing the output of git log in pure C#.&lt;/p&gt;

&lt;h3 id="toc_0"&gt;Getting git log output&lt;/h3&gt;

&lt;p&gt;Get output of &lt;code&gt;git log --name-status&lt;/code&gt; by specifying path of git repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static string ListShaWithFiles(string path)
    {
        var output = RunProcess(string.Format(&amp;quot; --git-dir={0}/.git --work-tree={1} log --name-status&amp;quot;, path.Replace(&amp;quot;\\&amp;quot;, &amp;quot;/&amp;quot;), path.Replace(&amp;quot;\\&amp;quot;, &amp;quot;/&amp;quot;)));
        return output;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Helper for getting command line output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private static string RunProcess(string command)
    {
        // Start the child process.
        Process p = new Process();
        // Redirect the output stream of the child process.
        p.StartInfo.UseShellExecute = false;
        p.StartInfo.RedirectStandardOutput = true;
        p.StartInfo.FileName = Config.GitExectuable;
        p.StartInfo.Arguments = command;
        p.Start();
        // Read the output stream first and then wait.
        string output = p.StandardOutput.ReadToEnd();
        p.WaitForExit();
        return output;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_1"&gt;Parse output&lt;/h3&gt;

&lt;p&gt;Basic parse loop for parsing a commit.  Will show how to populate next.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        using (var strReader = new StringReader(output))
        {
            do
            {
                var line = strReader.ReadLine();

                if( line.StartsWith(&amp;quot;commit &amp;quot;) )
                {
                }

                if ( StartsWithHeader(line) )
                {
                }

                if (string.IsNullOrEmpty(line) )
                {
                    // commit message divider
                }

                if (line.Length &amp;gt; 0 &amp;amp;&amp;amp; line[0] == &amp;#39;\t&amp;#39;)
                { 
                    // commit message.
                }

                if (line.Length &amp;gt; 1 &amp;amp;&amp;amp; Char.IsLetter(line[0]) &amp;amp;&amp;amp; line[1] == &amp;#39;\t&amp;#39;)
                {
                    // file status
                }
            }
            while (strReader.Peek() != -1);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Helper function to help check if a line is a header.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private bool StartsWithHeader(string line)
    {
        if( line.Length &amp;gt; 0 &amp;amp;&amp;amp; char.IsLetter( line[0] ) )
        {
            var seq = line.SkipWhile( ch =&amp;gt; Char.IsLetter(ch) &amp;amp;&amp;amp; ch != &amp;#39;:&amp;#39; );
            return seq.FirstOrDefault() == &amp;#39;:&amp;#39;;
        }
        return false;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_2"&gt;Storing results.&lt;/h3&gt;

&lt;p&gt;Class for holding commits &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GitCommit
{
    public GitCommit()
    {
        Headers = new Dictionary&amp;lt;string, string&amp;gt;();
        Files = new List&amp;lt;GitFileStatus&amp;gt;();
        Message = &amp;quot;&amp;quot;;
    }

    public Dictionary&amp;lt;string, string&amp;gt; Headers { get; set; }
    public string Sha { get; set; }
    public string Message { get; set; }
    public List&amp;lt;GitFileStatus&amp;gt; Files { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and File status&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GitFileStatus
{
    public string Status { get; set; }
    public string File { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Populating results&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        GitCommit commit = null;
        var commits = new List&amp;lt;GitCommit&amp;gt;();
        bool processingMessage = false;
        using (var strReader = new StringReader(output))
        {
            do
            {
                var line = strReader.ReadLine();

                if( line.StartsWith(&amp;quot;commit &amp;quot;) )
                {
                    if (commit != null)
                        commits.Add(commit);
                    commit = new GitCommit();
                    commit.Sha = line.Split(&amp;#39; &amp;#39;)[1];
                }

                if ( StartsWithHeader(line) )
                {
                    var header = line.Split(&amp;#39;:&amp;#39;)[0];
                    var val = string.Join(&amp;quot;:&amp;quot;,line.Split(&amp;#39;:&amp;#39;).Skip(1)).Trim();

                    // headers
                    commit.Headers.Add(header, val);
                }

                if (string.IsNullOrEmpty(line) )
                {
                    // commit message divider
                    processingMessage = !processingMessage;
                }

                if (line.Length &amp;gt; 0 &amp;amp;&amp;amp; line[0] == &amp;#39;\t&amp;#39;)
                { 
                    // commit message.
                    commit.Message += line;
                }

                if (line.Length &amp;gt; 1 &amp;amp;&amp;amp; Char.IsLetter(line[0]) &amp;amp;&amp;amp; line[1] == &amp;#39;\t&amp;#39;)
                {
                    var status = line.Split(&amp;#39;\t&amp;#39;)[0];
                    var file = line.Split(&amp;#39;\t&amp;#39;)[1];
                    commit.Files.Add(new GitFileStatus() { Status = status, File = file } );
                }
            }
            while (strReader.Peek() != -1);
        }
        if (commit != null)
            commits.Add(commit);

        return commits;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_3"&gt;Run it all and print back results&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    string path = @&amp;quot;C:\DEV\github\Codegrams&amp;quot;;
    if (args.Length &amp;gt; 0)
        path = args[0];
    var output = GitCommands.ListShaWithFiles(path);

    var parser = new ParseGitLog();
    var commits = parser.Parse(output);

    Console.WriteLine(commits.Count);
    foreach (var commit in commits)
    {
        commit.Print();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Print helper&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void Print()
    {
        Console.WriteLine(&amp;quot;commit &amp;quot; + Sha);
        foreach (var key in Headers.Keys)
        {
            Console.WriteLine(key + &amp;quot;:&amp;quot; + Headers[key]);
        }
        Console.WriteLine();
        Console.WriteLine(Message);
        Console.WriteLine();
        foreach (var file in Files)
        {
            Console.WriteLine(file.Status + &amp;quot;\t&amp;quot; + file.File);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Api Diaries - Twilio</title>
      <link>http://chrisparnin.github.io/articles/2013/05/api-diaries-twilio</link>
      <pubDate>2013-05-20</pubDate>
      <description>&lt;p&gt;&lt;a href="http://www.twilio.com/"&gt;Twilio&lt;/a&gt; makes telephony dead simple for developers.  A developer should be able to do cool things with their API, like sending text messages and setting up conference calls in under 5 minutes.  Such a company must live or die on API design.&lt;/p&gt;

&lt;p&gt;I was very fortunate to speak with &lt;a href="https://twitter.com/jf"&gt;Joel Franusic&lt;/a&gt; to learn how Twilio engages and understands developers when building their API. The following is a based on our conversation:&lt;/p&gt;

&lt;h3 id="toc_0"&gt;How do they know how to get Api Design right?&lt;/h3&gt;

&lt;h4 id="toc_1"&gt;Monitoring channels&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;We go where we are talked about&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://forum.twilio.com/twilio"&gt;getsatisfaction.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/tagged/twilio"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/search/realtime?q=%23twilio"&gt;twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hnsearch.com/search#request/all&amp;amp;q=twilio"&gt;Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;email (lots)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example tweets:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If any #nodejs #twilio guys could help debug &lt;a href="https://gist.github.com/1314454"&gt;https://gist.github.com/1314454&lt;/a&gt; and why it&amp;#39;s saying not authenticated when I do the request&lt;/p&gt;

&lt;p&gt;.@twilio Why can&amp;#39;t I send an SMS with the words &amp;quot;need to cancel&amp;quot; in it? I keep getting this error: &lt;a href="http://www.twilio.com/docs/errors/21618"&gt;http://www.twilio.com/docs/errors/21618&lt;/a&gt; #janky&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;There are some challenges with doing this&lt;/strong&gt;.  Currently, these channels are manually monitored by the support team.  Although all channels are attended, the issues and resolutions are not always curated and are often handled in different ways.  At the moment, product review meetings and decisions on customer feedback is based on the &amp;quot;semi-intuitive&amp;quot; recollection of issues, more often than on &amp;quot;hard-data&amp;quot;.&lt;/p&gt;

&lt;h4 id="toc_2"&gt;API Usage data&lt;/h4&gt;

&lt;p&gt;API usage data is used internally to refactor API design and understand their users.  For example, one feature was found to be overly exploited by developers and as a result took too much bandwidth. Developers were using the API to request information about their own data usage (kinda meta).  This was changed to so that they instead &lt;a href="http://www.twilio.com/docs/api/rest/usage-triggers"&gt;register a callback&lt;/a&gt; to know when they are approaching a limit.&lt;/p&gt;

&lt;h4 id="toc_3"&gt;Community building&lt;/h4&gt;

&lt;p&gt;Hackathons, meetups, and live demos are the preferred way to engage with developers.  There is still very much footwork in all this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Prizes are bullshit.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Developers are often well off and are not always inspired by monetary rewards.  Prizes and contests are not commonly used, but if a prize is given away, items encouraging learning and hacking are used, such as Knuth books or a Raspberry Pi.&lt;/p&gt;

&lt;p&gt;Closed betas are also used, to get early feedback from some of the heaviest (or most vocal) users.  For example, &lt;a href="http://www.kalzumeus.com/2011/12/19/productizing-twilio-applications/"&gt;Patrick McKenzie&lt;/a&gt; was instrumental in calling for a solution for automated testing of twilio apps.  A closed beta was able to iron out many of the details and work for adding &lt;a href="http://www.twilio.com/docs/api/rest/test-credentials"&gt;this feature&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id="toc_4"&gt;Company culture&lt;/h4&gt;

&lt;p&gt;Understanding developers is also ingrained into the company culture.
All new hires spend the first two weeks &lt;a href="http://www.zendesk.com/blog/new-employees-answer-support-tickets"&gt;handling support tickets&lt;/a&gt;.  Any employee (including non-devs) can earn street cred by demoing their own twilio app, earning the right to proudly wear the company&amp;#39;s red track jacket.&lt;/p&gt;

&lt;h2 id="toc_5"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Companies built on apis must make developers happy.  Understanding developer&amp;#39;s opinions, problems, and usage patterns still involve manual collection, on-the-ground engagement, and ad-hoc analytics.  There are many opportunities to learn and make this space better.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Why Your Academic Blog Post is Worth $200,000</title>
      <link>http://chrisparnin.github.io/articles/2013/04/why-your-academic-blog-post-is-worth-200-000</link>
      <pubDate>2013-04-23</pubDate>
      <description>&lt;h2 id="toc_0"&gt;Grab your Audience&amp;#39;s Attention.&lt;/h2&gt;

&lt;p&gt;If you do not blog about your research, you might as well take all your papers and burn them right now.
&lt;strong&gt;Because no one will read your paper or remember your talk at a conference.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not because it isn&amp;#39;t wonderful work, but because human bandwidth is terribly limited. Most new memories will fade after a few hours or days, 
and essentially non-existent after 3 months. In an event as fully packed as a conference, with thousands of people, hundreds of conversations, and dozens of 
presentations, chances are your presentation will be forgotten against all the other competing memories.&lt;/p&gt;

&lt;p&gt;People&amp;#39;s time and attention costs money.  To get your research presented in 20 minutes to room of 100 people, 
costs each person easily $2000 (registeration, airfare, and hotel) to be there.  &lt;strong&gt;Collectively, was your talk well-worth $200,000?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Prepare Takeaways&lt;/h2&gt;

&lt;p&gt;Blogging about your research can spread your message to a much bigger room of people.&lt;br&gt;
But these people do not have 20 minutes, and your writing must reflect that. 
Further, consider how people consume content: You are competing with several other open tabs from facebook, twitter, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most readers will only spend about 10-30 seconds reading your blog post.&lt;/li&gt;
&lt;li&gt;Stick to only one topic; anything else will derail your message.&lt;/li&gt;
&lt;li&gt;Prepacked takeaway points can be read quickly and spread through social media, reinforcing your message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;#39;ve reached an additional 100 visitors, then you&amp;#39;ve doubled your audience for very little additional effort.
Chances are you will reap other benefits, including research collaborations, consulting offers, increased citations, and people actually reading your paper.&lt;/p&gt;

&lt;h2 id="toc_2"&gt;Foster comments and discussion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Software developers will tear your ideas to shreds: This is a good thing.&lt;/strong&gt;  Software developers&amp;#39; discussion of research can be dismissive, deeply critical, fixate to the point of distraction on minor issues, and may not have the best understanding of methodology. But they often have good intution and can ofter perspectives or scenarios you never imagined and are always worth your consideration. Learn to channel these comments into something positive.&lt;/p&gt;

&lt;p&gt;Go where the developers are: reddit, hacker news, twitter, etc. Do not shy away from engaging the community directly. 
Perhaps, start with a small audience, maybe a subreddit related to your topic.  Avoid saturating your social networks,
if you have something worth sharing, even starting with something small, it will spread on its own.  &lt;strong&gt;Be mindful of your social currency: do not expect people to continously tune into your broadcasts.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="toc_3"&gt;Bonus Round&lt;/h2&gt;

&lt;p&gt;Since you have your audience&amp;#39;s attention, you might as well ask them for something.
They can help out by being &lt;a href="https://chrome.google.com/webstore/detail/docsight/ceacnbgdhcnofnomlkmackaennjfmnpc"&gt;trying out your tool&lt;/a&gt;, &lt;a href="http://www.cc.gatech.edu/%7Evector/donatehistory.html"&gt;contributing data&lt;/a&gt;, commenting below, or checking out other articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.felienne.com/?cat=3"&gt;Felienne Herman&amp;#39;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ninlabs.com"&gt;Ninlabs Research Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.neverworkintheory.org/"&gt;It Will Never Work in Theory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>
